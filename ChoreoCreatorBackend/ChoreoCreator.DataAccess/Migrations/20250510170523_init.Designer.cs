// <auto-generated />
using System;
using ChoreoCreator.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChoreoCreator.DataAccess.Migrations
{
    [DbContext(typeof(ChoreoCreatorDbContext))]
    [Migration("20250510170523_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.DancerPositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DancerNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("FormationId")
                        .HasColumnType("uuid");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FormationId");

                    b.ToTable("DancerPositions");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.FormationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOnScenario")
                        .HasColumnType("integer");

                    b.Property<Guid>("ScenarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Formations");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.ScenarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DancerCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.DancerPositionEntity", b =>
                {
                    b.HasOne("ChoreoCreator.DataAccess.Entities.FormationEntity", "Formation")
                        .WithMany("DancerPositions")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.FormationEntity", b =>
                {
                    b.HasOne("ChoreoCreator.DataAccess.Entities.ScenarioEntity", "Scenario")
                        .WithMany("Formations")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.ScenarioEntity", b =>
                {
                    b.HasOne("ChoreoCreator.DataAccess.Entities.UserEntity", "User")
                        .WithMany("Scenarios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.FormationEntity", b =>
                {
                    b.Navigation("DancerPositions");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.ScenarioEntity", b =>
                {
                    b.Navigation("Formations");
                });

            modelBuilder.Entity("ChoreoCreator.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Scenarios");
                });
#pragma warning restore 612, 618
        }
    }
}
